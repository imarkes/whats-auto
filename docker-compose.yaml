version: "3.9"

volumes:
  pg_data:
    name: pg_data
  evo_data:
    name: evo_data
  n8n_data:
    name: n8n_data


networks:
  backend:
    name: backend
    driver: bridge
  webserver:
    name : webserver
    driver: bridge

    
services:
  # db:
  #   container_name: postgres
  #   image: postgres:16.4-alpine
  #   env_file:
  #     - .env-prod
  #   networks:
  #     - backend
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pg_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 10
  #   logging:
  #     options:
  #         max-size: 10m
  #         max-file: "3"

  traefik:
    image: traefik:2.11.2
    command:
      - "--api.dashboard=true"
      # - "--providers.docker.swarmMode=true"
      - "--api.insecure=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=webserver"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web,websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencryptresolver.acme.email=forezymodas@gmail.com"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/etc/traefik/letsencrypt/acme.json"
      - "--log.level=ERROR"
      - "--log.format=common"
      - "--log.filePath=/var/log/traefik/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access-log"

    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-https@docker"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=leresolver"
      - "traefik.http.routers.http-catchall.priority=1"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.127.0.0.1.nip.io`)"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "certs:/etc/traefik/letsencrypt"
      - $PWD/acme.json:/acme.json
    ports:
      - "80:80"
      - "443:443"
    networks:
      - webserver

  # evo:
  #   container_name: evo
  #   image: atendai/evolution-api:v2.1.0 
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - evo_data:/evolution/instances
  #   networks:
  #     - backend
  #     - webserver
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env-prod

  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.evolution.rule=Host(`evo.127.0.0.1.nip.io:8080`)
  #     - traefik.http.routers.evolution.tls=true
  #     - traefik.http.routers.evolution.entrypoints=web,websecure
  #     - traefik.http.routers.evolution.tls.certresolver=mytlschallenge
  #     - traefik.http.middlewares.evolution.headers.SSLRedirect=true
  #     - traefik.http.middlewares.evolution.headers.STSSeconds=315360000
  #     - traefik.http.middlewares.evolution.headers.browserXSSFilter=true
  #     - traefik.http.middlewares.evolution.headers.contentTypeNosniff=true
  #     - traefik.http.middlewares.evolution.headers.forceSTSHeader=true
  #     - traefik.http.middlewares.evolution.headers.SSLHost=127.0.0.1.nip.io:8080
  #     - traefik.http.middlewares.evolution.headers.STSIncludeSubdomains=true
  #     - traefik.http.middlewares.evolution.headers.STSPreload=true
  #     - traefik.http.routers.evolution.middlewares=n8n@docker

  # n8n:
  #   container_name: n8n
  #   image: docker.n8n.io/n8nio/n8n
  #   restart: always
  #   ports:
  #     - "5678:5678"
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.n8n.rule=Host(`n8n.127.0.0.1.nip.io:5678`)
  #     - traefik.http.routers.n8n.tls=true
  #     - traefik.http.routers.n8n.entrypoints=web,websecure
  #     - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
  #     - traefik.http.middlewares.n8n.headers.SSLRedirect=true
  #     - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
  #     - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
  #     - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
  #     - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
  #     - traefik.http.middlewares.n8n.headers.SSLHost=127.0.0.1.nip.io:5678
  #     - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
  #     - traefik.http.middlewares.n8n.headers.STSPreload=true
  #     - traefik.http.routers.n8n.middlewares=n8n@docker
  #   environment:
  #       # Database
  #     # - DB_TYPE=sqlite

  #     # - DB_POSTGRESDB_HOST=
  #     # - DB_POSTGRESDB_PORT=5432
  #     # - DB_POSTGRESDB_DATABASE=
  #     # - DB_POSTGRESDB_USER=
  #     # - DB_POSTGRESDB_PASSWORD=
  #     # self
  #     - SUBDOMAIN=n8n
  #     - DOMAIN_NAME=http://127.0.0.1.nip.io:5678
  #     - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
  #     - N8N_PORT=5678
  #     - N8N_PROTOCOL=https
  #     - NODE_ENV=production
  #     # - EXECUTIONS_MODE=queue
  #     - WEBHOOK_URL=http://${SUBDOMAIN}.${DOMAIN_NAME}/
  #     - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
  #     #Logs
  #     # - N8N_LOG_LEVEL=error
  #   volumes:
  #     - n8n_data:/home/node/.n8n
  #     - ./n8n-local-files:/files
  #   networks:
  #     - webserver
  #     - backend

  # nginx:
  #   image: nginx
  #   depends_on:
  #     - evo
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - "80:80"
  #   networks:
  #     - webserver

  # redis:
  #   image: redis:latest
  #   networks:
  #     - network_public
  #   container_name: redis
  #   environment:
  #     - CACHE_REDIS_ENABLED=true
  #     - CACHE_REDIS_URI=redis://localhost:6379/6
  #       # Prefix serves to differentiate data from one installation to another that are using the same redis
  #     - CACHE_REDIS_PREFIX_KEY=evolution
  #       # Enabling this variable will save the connection information in Redis and not in the database.
  #     - CACHE_REDIS_SAVE_INSTANCES=false
  #       # Local Cache enabled
  #     - CACHE_LOCAL_ENABLED=false
  #   command: >
  #     redis-server --port 6379 --appendonly yes
  #   volumes:
  #     - evolution_redis:/data
  #   ports:
  #     - 6379:6379

























  # nginx:
  #   container_name: nginx
  #   depends_on:
  #     - evolution
  #   restart: always
  #   build: 
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - 80:80
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: "256M"
  #   networks:
  #     - network_aplication

  