version: "3.9"

volumes:
  pg_data:
    name: pg_data
  evo_data:
    name: evo_data
  n8n_data:
    name: n8n_data


networks:
  backend:
    name: backend
    driver: bridge
  proxy:
    external: true

    
services:
  db:
    container_name: postgres
    image: postgres:16.4-alpine
    env_file:
      - .env-prod
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    logging:
      options:
          max-size: 10m
          max-file: "3"

  evo:
    container_name: evo
    image: atendai/evolution-api:v2.1.0 
    restart: always
    ports:
      - 8080:8080
    volumes:
      - evo_data:/evolution/instances
    networks:
      - backend
      - proxy
    depends_on:
      - db
    env_file:
      - .env-prod
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evo.rule=Host(`evo.imostech.cloud`)"
      - "traefik.http.routers.evo.tls=true"
      - "traefik.http.routers.evo.entrypoints=https"
      - "traefik.http.routers.evo.tls=true"
      - "traefik.http.services.evo.loadbalancer.server.port=8080"
      - "traefik.http.routers.evo.tls.certresolver=cloudflare"
      - "traefik.http.middlewares.evo.headers.SSLRedirect=true"
      - "traefik.http.middlewares.evo.headers.STSSeconds=315360000"
      - "traefik.http.middlewares.evo.headers.browserXSSFilter=true"
      - "traefik.http.middlewares.evo.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.evo.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.evo.headers.SSLHost=imostech.cloud"
      - "traefik.http.middlewares.evo.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.evo.headers.STSPreload=true"
      - "traefik.http.routers.evo.middlewares=evo@docker"

  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evo.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.evo.tls=true"
      - "traefik.http.routers.evo.entrypoints=https"
      - "traefik.http.routers.evo.tls=true"
      - "traefik.http.services.evo.loadbalancer.server.port=8080"
      - "traefik.http.routers.evo.tls.certresolver=cloudflare"
      - "traefik.http.middlewares.evo.headers.SSLRedirect=true"
      - "traefik.http.middlewares.evo.headers.STSSeconds=315360000"
      - "traefik.http.middlewares.evo.headers.browserXSSFilter=true"
      - "traefik.http.middlewares.evo.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.evo.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.evo.headers.SSLHost=${DOMAIN_NAME}"
      - "traefik.http.middlewares.evo.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.evo.headers.STSPreload=true"
      - "traefik.http.routers.evo.middlewares=n8n@docker"

    environment:
      # Database
      # - DB_TYPE=sqlite
      # - DB_POSTGRESDB_HOST=
      # - DB_POSTGRESDB_PORT=5432
      # - DB_POSTGRESDB_DATABASE=
      # - DB_POSTGRESDB_USER=
      # - DB_POSTGRESDB_PASSWORD=
      # self
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      # - EXECUTIONS_MODE=queue
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      #Logs
      - N8N_LOG_LEVEL=error
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-local-files:/files
    networks:
      - proxy
      - backend

  # redis:
  #   image: redis:latest
  #   networks:
  #     - network_public
  #   container_name: redis
  #   environment:
  #     - CACHE_REDIS_ENABLED=true
  #     - CACHE_REDIS_URI=redis://localhost:6379/6
  #       # Prefix serves to differentiate data from one installation to another that are using the same redis
  #     - CACHE_REDIS_PREFIX_KEY=evolution
  #       # Enabling this variable will save the connection information in Redis and not in the database.
  #     - CACHE_REDIS_SAVE_INSTANCES=false
  #       # Local Cache enabled
  #     - CACHE_LOCAL_ENABLED=false
  #   command: >
  #     redis-server --port 6379 --appendonly yes
  #   volumes:
  #     - evolution_redis:/data
  #   ports:
  #     - 6379:6379
