version: "3.9"

volumes:
  pg_data:
    name: pg_data
  evo_data:
    name: evo_data
  n8n_data:
    name: n8n_data

networks:
  proxy:
    name: proxy
  backend:
    name: backend
    # attachable: true
    # driver_opts:
    #  com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"

services:
  db:
    image: postgres:16.4-alpine
    env_file:
      - .env-db
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    logging:
      options:
        max-size: 10m
        max-file: "3"

  evo:
    image: atendai/evolution-api:v2.1.0
    ports:
      - 8080:8080
    volumes:
      - evo_data:/evolution/instances
    networks:
      - proxy
      - backend
    env_file:
      - .env-evo
    depends_on:
      - db
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evo.rule=Host(`${SUBDOMAIN_EVO}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.evo.tls=true"
      - "traefik.http.routers.evo.entrypoints=https"
      - "traefik.http.services.evo.loadbalancer.server.port=8080"
      - "traefik.http.routers.evo.tls.certresolver=cloudflare"
      - "traefik.http.middlewares.evo.headers.SSLRedirect=true"
      - "traefik.http.middlewares.evo.headers.STSSeconds=315360000"
      - "traefik.http.middlewares.evo.headers.browserXSSFilter=true"
      - "traefik.http.middlewares.evo.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.evo.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.evo.headers.SSLHost=${DOMAIN_NAME}"
      - "traefik.http.middlewares.evo.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.evo.headers.STSPreload=true"
      - "traefik.http.routers.evo.middlewares=evo@docker"

  n8n:
    image: docker.n8n.io/n8nio/n8n
    ports:
      - "5678:5678"
    env_file:
      - .env-n8n
    environment:
      # Database
      # - DB_TYPE=postgresdb
      # - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      # - DB_POSTGRESDB_PORT=5432
      # - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      # - DB_POSTGRESDB_USER=${POSTGRES_USER}
      # - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      # self
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      # - EXECUTIONS_MODE=queue
      - WEBHOOK_URL=http://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      #Logs
      - N8N_LOG_LEVEL=error
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-local-files:/files
    networks:
      - proxy
      - backend
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}}`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.entrypoints=https"
      - "traefik.http.services.n8n.loadbalancer.server.port=8080"
      - "traefik.http.routers.n8n.tls.certresolver=cloudflare"
      - "traefik.http.middlewares.n8n.headers.SSLRedirect=true"
      - "traefik.http.middlewares.n8n.headers.STSSeconds=315360000"
      - "traefik.http.middlewares.n8n.headers.browserXSSFilter=true"
      - "traefik.http.middlewares.n8n.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.n8n.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}"
      - "traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.n8n.headers.STSPreload=true"
      - "traefik.http.routers.n8n.middlewares=n8n@docker"

  # web:
  #   image: nginx
  #   depends_on:
  #     - evo
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #     - certs:/etc/ssl/certs
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: "128M"
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - webserver

  # redis:
  #   image: redis:latest
  #   networks:
  #     - web
  #   container_name: redis
  #   environment:
  #     - CACHE_REDIS_ENABLED=true
  #     - CACHE_REDIS_URI=redis://localhost:6379/6
  #       # Prefix serves to differentiate data from one installation to another that are using the same redis
  #     - CACHE_REDIS_PREFIX_KEY=evolution
  #       # Enabling this variable will save the connection information in Redis and not in the database.
  #     - CACHE_REDIS_SAVE_INSTANCES=false
  #       # Local Cache enabled
  #     - CACHE_LOCAL_ENABLED=false
  #   command: >
  #     redis-server --port 6379 --appendonly yes
  #   volumes:
  #     - evolution_redis:/data
  #   ports:
  #     - 6379:6379
